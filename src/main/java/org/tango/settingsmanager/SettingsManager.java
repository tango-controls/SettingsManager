/*----- PROTECTED REGION ID(SettingsManager.java) ENABLED START -----*/
//=============================================================================
//
// file :        SettingsManager.java
//
// description : Java source for the SettingsManager class and its commands.
//               The class is derived from Device. It represents the
//               CORBA servant object which will be accessed from the
//               network. All commands which can be executed on the
//               SettingsManager are implemented in this file.
//
// project :     Settings Manager
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
// Copyright (C): 2004,2005,2006,2007,2008,2009,2009,2010,2011,2012,2013,2014,2015
//                European Synchrotron Radiation Facility
//                BP 220, Grenoble 38043
//                France
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================

/*----- PROTECTED REGION END -----*/	//	SettingsManager.java

package org.tango.settingsmanager;

/*----- PROTECTED REGION ID(SettingsManager.imports) ENABLED START -----*/
import fr.esrf.Tango.*;
import fr.esrf.TangoApi.PipeBlob;
import fr.esrf.TangoApi.PipeDataElement;
import fr.esrf.TangoDs.Except;
import fr.esrf.TangoDs.TangoConst;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.slf4j.ext.XLogger;
import org.slf4j.ext.XLoggerFactory;
import org.tango.DeviceState;
import org.tango.server.InvocationContext;
import org.tango.server.ServerManager;
import org.tango.server.annotation.*;
import org.tango.server.annotation.Device;
import org.tango.server.device.DeviceManager;
import org.tango.server.dynamic.DynamicManager;
import org.tango.server.pipe.PipeValue;
import org.tango.settingsmanager.commons.ICommons;
import org.tango.settingsmanager.commons.Utils;

import java.io.File;
import java.util.List;
import java.util.StringTokenizer;

import static org.tango.settingsmanager.commons.ICommons.OK_MESSAGE;

/*----- PROTECTED REGION END -----*/	//	SettingsManager.imports

/**
 *  SettingsManager class description:
 *    This idea is to standardize and centralize the settings management for the control system.
 *    It will have to be accessible from client applications and servers written in C++, Java or Python.
 *    
 *    The most flexible system to store the settings is to use files on disk.
 *    Users will be able to manage sub system, copies or edition (device/attribute renaming).
 *    All settings files will be store under a $SETTINGS_ROOT directory.
 *    A subdirectory will be created for each accelerator system.
 *    To be accessible from all languages, a TANGO class will manage read, write and apply settings for attributes.
 *    Each instance of this class will manage a system (SRRF, RIPS, LINAC, ...) files under its
 *    own subdirectory fixed by a TANGO property.
 *    This class will be able to:
 *     - Write a settings file with an optional list of attribute as input argument. This class will be responsible
 *       to do not write above its subdirectory.
 *     - Get file content to preview file with string as output argument.
 *     - Apply settings to attributes.
 *     - Read a settings file and return content in a pipe (att1 name, att1 value, att2 name, att2 value, ...)
 */

@Device
public class SettingsManager {

	protected static final Logger logger = LoggerFactory.getLogger(SettingsManager.class);
	protected static final XLogger xlogger = XLoggerFactory.getXLogger(SettingsManager.class);
	//========================================================
	//	Programmer's data members
	//========================================================
    /*----- PROTECTED REGION ID(SettingsManager.variables) ENABLED START -----*/
    
    private static final int DEFAULT_CHECK_PERIOD = 2;  //  2 seconds if not set

    /*----- PROTECTED REGION END -----*/	//	SettingsManager.variables
	/*----- PROTECTED REGION ID(SettingsManager.private) ENABLED START -----*/
	
	//	Put private variables here
	private int action = ICommons.INIT;
	private String absolutePath;
	private TangoDeviceList deviceList;
    private SettingsCompareThread compareThread = null;

	/*----- PROTECTED REGION END -----*/	//	SettingsManager.private

	//========================================================
	//	Property data members and related methods
	//========================================================
	/**
	 * Class Property RootPath
	 * Root path for all settings systems
	 */
	@ClassProperty(name="RootPath", description="Root path for all settings systems" )
	private String rootPath;
	/**
	 * set property RootPath
	 * @param  rootPath  see description above.
	 */
	public void setRootPath(String rootPath) {
		this.rootPath = rootPath;
		/*----- PROTECTED REGION ID(SettingsManager.setRootPath) ENABLED START -----*/
		
		//	Check property value here

		/*----- PROTECTED REGION END -----*/	//	SettingsManager.setRootPath
	}
	
	/**
	 * Device Property SettingsFilesPath
	 * Path under the RootPath to read/write settings file.
	 */
	@DeviceProperty(name="SettingsFilesPath", description="Path under the RootPath to read/write settings file."  )
	private String settingsFilesPath;
	/**
	 * set property SettingsFilesPath
	 * @param  settingsFilesPath  see description above.
	 */
	public void setSettingsFilesPath(String settingsFilesPath) {
		this.settingsFilesPath = settingsFilesPath;
		/*----- PROTECTED REGION ID(SettingsManager.setSettingsFilesPath) ENABLED START -----*/
		
		//	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.setSettingsFilesPath
	}
	
	/**
	 * Device Property DefaultAttributeList
	 * Default attribute list to generate settings file
	 * if no attributes sent in WriteSettingsFile command
	 */
	@DeviceProperty(name="DefaultAttributeList", description="Default attribute list to generate settings file\nif no attributes sent in WriteSettingsFile command"  )
	private String[] defaultAttributeList;
	/**
	 * set property DefaultAttributeList
	 * @param  defaultAttributeList  see description above.
	 */
	public void setDefaultAttributeList(String[] defaultAttributeList) {
		this.defaultAttributeList = defaultAttributeList;
		/*----- PROTECTED REGION ID(SettingsManager.setDefaultAttributeList) ENABLED START -----*/
		
		//	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.setDefaultAttributeList
	}
	
	/**
	 * Device Property SettingsTimeout
	 * timeout to write settings on specified devices in milliseconds.
	 */
	@DeviceProperty(name="SettingsTimeout", description="timeout to write settings on specified devices in milliseconds." ,
	        defaultValue={ "3000" } )
	private int settingsTimeout;
	/**
	 * set property SettingsTimeout
	 * @param  settingsTimeout  see description above.
	 */
	public void setSettingsTimeout(int settingsTimeout) {
		this.settingsTimeout = settingsTimeout;
		/*----- PROTECTED REGION ID(SettingsManager.setSettingsTimeout) ENABLED START -----*/
		
		//	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.setSettingsTimeout
	}
	
	/**
	 * Device Property Debug
	 * Add trace mode if true
	 */
	@DeviceProperty(name="Debug", description="Add trace mode if true" ,
	        defaultValue={ "false" } )
	private boolean debug;
	/**
	 * set property Debug
	 * @param  debug  see description above.
	 */
	public void setDebug(boolean debug) {
		this.debug = debug;
		/*----- PROTECTED REGION ID(SettingsManager.setDebug) ENABLED START -----*/
		Utils.setDebugMode(debug);
		System.out.println("Debug mode: " + debug);
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.setDebug
	}
	
	/**
	 * Device Property UseAttributeFormat
	 * Use attribute property format to write value in file if true.
	 */
	@DeviceProperty(name="UseAttributeFormat", description="Use attribute property format to write value in file if true." ,
	        defaultValue={ "true" } )
	private boolean useAttributeFormat;
	/**
	 * set property UseAttributeFormat
	 * @param  useAttributeFormat  see description above.
	 */
	public void setUseAttributeFormat(boolean useAttributeFormat) {
		this.useAttributeFormat = useAttributeFormat;
		/*----- PROTECTED REGION ID(SettingsManager.setUseAttributeFormat) ENABLED START -----*/
		
		//	Check property value here
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.setUseAttributeFormat
	}
	


	//========================================================
	//	Miscellaneous methods
	//========================================================
	/**
	 * Initialize the device.
	 * 
	 * @throws DevFailed if something fails during the device initialization.
	 */
	@Init(lazyLoading = false)
	public void initDevice() throws DevFailed {
		xlogger.entry();
		logger.debug("init device " + deviceManager.getName());
		/*----- PROTECTED REGION ID(SettingsManager.initDevice) ENABLED START -----*/

		checkProperties();
		setState(DevState.ON);
		setStatus(OK_MESSAGE);
		defaultAttributes = defaultAttributeList;
        checkChangePeriod = DEFAULT_CHECK_PERIOD;
		Utils.setSettingsTimeout(settingsTimeout);

		/*----- PROTECTED REGION END -----*/	//	SettingsManager.initDevice
		xlogger.exit();
	}

	/**
	 * all resources may be closed here. Collections may be also cleared.
	 * 
	 * @throws DevFailed if something fails during the device object deletion.
	 */
	@Delete
	public void deleteDevice() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(SettingsManager.deleteDevice) ENABLED START -----*/
		
		//	Put your device clearing code here
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.deleteDevice
		xlogger.exit();
	}

	/**
	 * Method called before and after command and attribute calls.
	 * @param ctx the invocation context
	 * @throws DevFailed if something fails during this method execution.
	 */
	@AroundInvoke
	public void aroundInvoke(final InvocationContext ctx) throws DevFailed {
		xlogger.entry();
			/*----- PROTECTED REGION ID(SettingsManager.aroundInvoke) ENABLED START -----*/
			
			//	Put aroundInvoke code here
		/*
		if (firstTime) {
			startPolling();
			firstTime = false;
		}
		*/
			/*----- PROTECTED REGION END -----*/	//	SettingsManager.aroundInvoke
		xlogger.exit();
	}

	
	/**
	 * dynamic command and attribute management. Will be injected by the framework.
	 */
	@DynamicManagement
	protected DynamicManager dynamicManager;
	/**
	 * @param dynamicManager the DynamicManager instance 
	 * @throws DevFailed if something fails during this method execution.
	 */
	public void setDynamicManager(final DynamicManager dynamicManager) throws DevFailed {
		this.dynamicManager = dynamicManager;
		/*----- PROTECTED REGION ID(SettingsManager.setDynamicManager) ENABLED START -----*/
		
		//	Put your code here
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.setDynamicManager
	}
	
	/**
	 * Device management. Will be injected by the framework.
	 */
	@DeviceManagement
	DeviceManager deviceManager;
	public void setDeviceManager(DeviceManager deviceManager){
		this.deviceManager= deviceManager ;
	}


	//========================================================
	//	Attribute data members and related methods
	//========================================================
	/**
	 * Attribute SettingsPath, String, Scalar, READ
	 * description:
	 *     Path where settings files are read and write.
	 */
	@Attribute(name="SettingsPath", isPolled=true, pollingPeriod=1000)
	@AttributeProperties(description="Path where settings files are read and write.",
	                     label="Settings path")
	private String settingsPath = "";
	/**
	 * Read attribute SettingsPath
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getSettingsPath() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(SettingsManager.getSettingsPath) ENABLED START -----*/
		
		//	Put read attribute code here
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.getSettingsPath
		attributeValue.setValue(settingsPath);
		xlogger.exit();
		return attributeValue;
	}
	
	/**
	 * Attribute LastGeneratedFile, String, Scalar, READ
	 * description:
	 *     
	 */
	@Attribute(name="LastGeneratedFile", isPolled=true, pollingPeriod=1000)
	@AttributeProperties(label="Last generated file")
	private String lastGeneratedFile = "";
	/**
	 * Read attribute LastGeneratedFile
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getLastGeneratedFile() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(SettingsManager.getLastGeneratedFile) ENABLED START -----*/
		
		//	Put read attribute code here
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.getLastGeneratedFile
		attributeValue.setValue(lastGeneratedFile);
		xlogger.exit();
		return attributeValue;
	}
	
	/**
	 * Attribute LastAppliedFile, String, Scalar, READ
	 * description:
	 *     
	 */
	@Attribute(name="LastAppliedFile", isPolled=true, pollingPeriod=1000)
	@AttributeProperties(label="Last applied file")
	private String lastAppliedFile = "";
	/**
	 * Read attribute LastAppliedFile
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getLastAppliedFile() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(SettingsManager.getLastAppliedFile) ENABLED START -----*/
		
		//	Put read attribute code here
        if (compareThread!=null) {
            if (compareThread.isAlarm()) {
                attributeValue.setQuality(AttrQuality.ATTR_ALARM);
                String errorMessage = compareThread.getErrorMessage();
                if (errorMessage.isEmpty()) {
                    setStatus("At least one attribute has changed");
                }
                else {
                    setStatus(errorMessage);
                }
                setState(DevState.ALARM);
            }
            else {
                setStatus(OK_MESSAGE);
                setState(DevState.ON);
            }
        }
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.getLastAppliedFile
		attributeValue.setValue(lastAppliedFile);
		xlogger.exit();
		return attributeValue;
	}
	
	/**
	 * Attribute CheckChangePeriod, int, Scalar, READ_WRITE
	 * description:
	 *     Period (in seconds) to check if settings have change since last appalied.
	 */
	@Attribute(name="CheckChangePeriod", isMemorized=true, isMemorizedAtInit=true,
	           isPolled=true, pollingPeriod=1000)
	@AttributeProperties(description="Period (in seconds) to check if settings have change since last appalied.",
	                     label="Check Change Period", unit="sec.", maxValue="300",
	                     minValue="1", changeEventAbsolute="1")
	private int checkChangePeriod;
	/**
	 * Read attribute CheckChangePeriod
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getCheckChangePeriod() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(SettingsManager.getCheckChangePeriod) ENABLED START -----*/
		
		//	Put read attribute code here
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.getCheckChangePeriod
		attributeValue.setValue(checkChangePeriod);
		xlogger.exit();
		return attributeValue;
	}
	/**
	 * Write attribute CheckChangePeriod
	 * @param  checkChangePeriod value to write
	 * @throws DevFailed if write attribute failed.
	 */
	public void setCheckChangePeriod(int checkChangePeriod) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(SettingsManager.setCheckChangePeriod) ENABLED START -----*/

		this.checkChangePeriod = checkChangePeriod;
        if (compareThread!=null)
            compareThread.setPeriod(checkChangePeriod);
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.setCheckChangePeriod
		xlogger.exit();
	}
	
	/**
	 * Attribute DefaultAttributes, String, Spectrum, READ
	 * description:
	 *     The default attribute list from property.
	 */
	@Attribute(name="DefaultAttributes", isPolled=true, pollingPeriod=1000)
	@AttributeProperties(description="The default attribute list from property.")
	private String[] defaultAttributes = new String[512];
	/**
	 * Read attribute DefaultAttributes
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getDefaultAttributes() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(SettingsManager.getDefaultAttributes) ENABLED START -----*/
		
		//	Put read attribute code here
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.getDefaultAttributes
		attributeValue.setValue(defaultAttributes);
		xlogger.exit();
		return attributeValue;
	}
	
	/**
	 * Attribute AlarmAttributes, String, Spectrum, READ
	 * description:
	 *     List of attributes in ALARM
	 */
	@Attribute(name="AlarmAttributes", isPolled=true, pollingPeriod=1000)
	@AttributeProperties(description="List of attributes in ALARM", label="Alarm attributes")
	private String[] alarmAttributes = new String[512];
	/**
	 * Read attribute AlarmAttributes
	 * 
	 * @return attribute value
	 * @throws DevFailed if read attribute failed.
	 */
	public org.tango.server.attribute.AttributeValue getAlarmAttributes() throws DevFailed {
		xlogger.entry();
		org.tango.server.attribute.AttributeValue
			attributeValue = new org.tango.server.attribute.AttributeValue();
		/*----- PROTECTED REGION ID(SettingsManager.getAlarmAttributes) ENABLED START -----*/
		
		if (compareThread==null) {
            attributeValue.setQuality(AttrQuality.ATTR_INVALID);
            alarmAttributes = new String[0];
        }
        else {
            attributeValue.setQuality(AttrQuality.ATTR_VALID);
            alarmAttributes = compareThread.getAlarmAttributes();
        }
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.getAlarmAttributes
		attributeValue.setValue(alarmAttributes);
		xlogger.exit();
		return attributeValue;
	}
	

	//========================================================
	//	Pipe data members and related methods
	//========================================================
	/**
	 * Pipe SettingValues
	 * description:
	 *     Returns the attributes with their values (setpoints).
	 */
	@Pipe(displayLevel=DispLevel._OPERATOR, label="Setting Values")
	private PipeValue settingValues;
	/**
	 * Read Pipe SettingValues
	 * 
	 * @return attribute value
	 * @throws DevFailed if read pipe failed.
	 */
	public PipeValue getSettingValues() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(SettingsManager.getSettingValues) ENABLED START -----*/
		System.out.println("getFileContent()");
		//	Put read pipe code here
        TangoPipeBlob tangoPipeBlob = new TangoPipeBlob("Settings");
        TangoDeviceList deviceList =
                new FileGenerator(defaultAttributeList, useAttributeFormat).generate();
        for (TangoDevice tangoDevice : deviceList) {
            for (TangoAttribute attribute : tangoDevice) {
                tangoPipeBlob.add(attribute, TangoConst.ACCESS_WRITE);
            }
        }
        settingValues = new PipeValue(tangoPipeBlob);

		/*----- PROTECTED REGION END -----*/	//	SettingsManager.getSettingValues
		xlogger.exit();
		return settingValues;
	}
	/**
	 * Pipe LastAppliedFileContent
	 * description:
	 *     Returns last applied file content
	 */
	@Pipe(displayLevel=DispLevel._OPERATOR, label="Last applied file content")
	private PipeValue lastAppliedFileContent;
	/**
	 * Read Pipe LastAppliedFileContent
	 * 
	 * @return attribute value
	 * @throws DevFailed if read pipe failed.
	 */
	public PipeValue getLastAppliedFileContent() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(SettingsManager.getLastAppliedFileContent) ENABLED START -----*/
        TangoPipeBlob tangoPipeBlob;
		if (lastAppliedFile.isEmpty()) {
			 tangoPipeBlob = new TangoPipeBlob("No settings file applied !");
		}
		else {
		    // ToDo
            //	Parse file and start applying
			tangoPipeBlob = new TangoPipeBlob(lastAppliedFile + " file");
			//TangoDeviceList deviceList = new FileGenerator(defaultAttributeList).generate();
            for (TangoDevice tangoDevice : deviceList) {
				for (TangoAttribute attribute : tangoDevice) {
                    ApplyTangoAttribute applyAttribute = (ApplyTangoAttribute) attribute;
					tangoPipeBlob.add(applyAttribute);
				}
			}
		}
        lastAppliedFileContent = new PipeValue(tangoPipeBlob);

		/*----- PROTECTED REGION END -----*/	//	SettingsManager.getLastAppliedFileContent
		xlogger.exit();
		return lastAppliedFileContent;
	}

	//========================================================
	//	Command data members and related methods
	//========================================================
	/**
	 * The state of the device
	*/
	@State
	private DevState state = DevState.UNKNOWN;
	/**
	 * Execute command "State".
	 * description: This command gets the device state (stored in its 'state' data member) and returns it to the caller.
	 * @return Device state
	 * @throws DevFailed if command execution failed.
	 */
	public final DevState getState() throws DevFailed {
		/*----- PROTECTED REGION ID(SettingsManager.getState) ENABLED START -----*/

		//System.out.println(ApiUtil.stateName(state)+ ":  " + System.currentTimeMillis());
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.getState
		return state;
	}
	/**
	 * Set the device state
	 * @param state the new device state
	 */
	public void setState(final DevState state) {
		this.state = state;
	}
	
	/**
	 * The status of the device
	 */
	@Status
	private String status = "Server is starting. The device state is unknown";
	/**
	 * Execute command "Status".
	 * description: This command gets the device status (stored in its 'status' data member) and returns it to the caller.
	 * @return Device status
	 * @throws DevFailed if command execution failed.
	 */
	public final String getStatus() throws DevFailed {
		/*----- PROTECTED REGION ID(SettingsManager.getStatus) ENABLED START -----*/

		/*----- PROTECTED REGION END -----*/	//	SettingsManager.getStatus
		return status;
	}
	/**
	 * Set the device status
	 * @param status the new device status
	 */
	public void setStatus(final String status) {
		this.status = status;
	}
	
	/**
	 * Execute command "GetSettingsFileContent".
	 * description: read the specified file content
	 * @param getSettingsFileContentIn Specified file name.
	 * @return The specified file content
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="GetSettingsFileContent", inTypeDesc="Specified file name.", outTypeDesc="The specified file content")
	public String GetSettingsFileContent(String getSettingsFileContentIn) throws DevFailed {
		xlogger.entry();
		String getSettingsFileContentOut;
		/*----- PROTECTED REGION ID(SettingsManager.getSettingsFileContent) ENABLED START -----*/
		String fileName = Utils.settingsFile(absolutePath + '/' + getSettingsFileContentIn);
		getSettingsFileContentOut = Utils.readFile(fileName);
		
		/*----- PROTECTED REGION END ----*/	//	SettingsManager.getSettingsFileContent
		xlogger.exit();
		return getSettingsFileContentOut;
	}
	
	/**
	 * Execute command "GenerateSettingsFile".
	 * description: the device will generate a settings file for specified attributes
	 * @param generateSettingsFileIn This array must contain file name.
	 *                               If no attributes are defined as property, it must contain attribute names.
	 *                               It can also contain author names and comments.
	 *                               Each element needs to start with:
	 *                               FILE:            for file name
	 *                               ATTRIBUTE:  for each attribute name
	 *                               AUTHOR:      for author name
	 *                               COMMENTS: for comments
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="GenerateSettingsFile", inTypeDesc="This array must contain file name.\nIf no attributes are defined as property, it must contain attribute names.\nIt can also contain author names and comments.\nEach element needs to start with:\nFILE:            for file name\nATTRIBUTE:  for each attribute name\nAUTHOR:      for author name\nCOMMENTS: for comments",
	         outTypeDesc="")
	@StateMachine(deniedStates={DeviceState.MOVING})
	public void GenerateSettingsFile(String[] generateSettingsFileIn) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(SettingsManager.generateSettingsFile) ENABLED START -----*/
		System.out.println("GenerateSettingsFile()");
		for (String str : generateSettingsFileIn)
			System.out.println("  - "+str);

		if (deviceList!=null)
			deviceList.reset();
		action = ICommons.GENERATE;
		try {
			//	Parse input argument and start to generate specified file
			FileGenerator fileGenerator =
					new FileGenerator(generateSettingsFileIn, absolutePath, defaultAttributeList, useAttributeFormat);
			deviceList = fileGenerator.generate();
			//	And Check results
			setState(fileGenerator.getGenerateState());
			setStatus(fileGenerator.getGenerateStatus());
			if (state==DevState.ALARM) {
				Except.throw_exception("AppliedFailed", status);
			}
			//	Set lastGeneratedFile to the input file name
			lastGeneratedFile = Utils.getDisplayFileName(fileGenerator.getFileName());
			//	Set lastAppliedFile to the input file name
			//	because generated and applied are same
			lastAppliedFile = lastGeneratedFile;
		}
		catch (DevFailed e) {
			setState(DevState.ALARM);
			setStatus(e.errors[0].desc);
			throw e;
		}
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.generateSettingsFile
		xlogger.exit();
	}
	
	/**
	 * Execute command "ApplySettings".
	 * description: Apply settings from specified file to attributes.
	 * @param applySettingsIn The specified file name
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="ApplySettings", inTypeDesc="The specified file name", outTypeDesc="")
	@StateMachine(deniedStates={DeviceState.MOVING})
	public void ApplySettings(String applySettingsIn) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(SettingsManager.applySettings) ENABLED START -----*/
		System.out.println("ApplySettings(): " + applySettingsIn);

        //  Stop previous thread if running
        if (compareThread!=null) {
            compareThread.stopThread();
            compareThread = null;
        }

        if (deviceList!=null)
			deviceList.reset();
		action = ICommons.APPLY;
		try {
			//	Parse file and start applying
			String fileName = Utils.settingsFile(absolutePath + '/' + applySettingsIn);
			deviceList = new FileParser(fileName, ICommons.APPLY).parseAttributes(useAttributeFormat);
			deviceList.manageSettings();

			//	And Check results
			setState(deviceList.getRunningState());
			setStatus(deviceList.getRunningStatus());
			if (state==DevState.ALARM) {
				Except.throw_exception("AppliedFailed", status);
			}
			lastAppliedFile = Utils.getDisplayFileName(applySettingsIn);

            //  Start a thread to check if settings have changed after apply
            if (checkChangePeriod>0) {
                compareThread = new SettingsCompareThread(fileName, checkChangePeriod, useAttributeFormat);
                compareThread.start();
            }

		}
		catch (DevFailed e) {
			setState(DevState.ALARM);
			setStatus(e.errors[0].desc);
			throw e;
		}
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.applySettings
		xlogger.exit();
	}
	
	/**
	 * Execute command "Reset".
	 * description: Reset ALARM state on device
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="Reset", inTypeDesc="", outTypeDesc="")
	@StateMachine(deniedStates={DeviceState.MOVING})
	public void Reset() throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(SettingsManager.reset) ENABLED START -----*/
		
		if (deviceList!=null && getState()==DevState.ALARM) {
			deviceList.reset();
			setState(DevState.ON);
			setStatus(ICommons.OK_MESSAGE);
		}

		/*----- PROTECTED REGION END -----*/	//	SettingsManager.reset
		xlogger.exit();
	}
	
	/**
	 * Execute command "FileExists".
	 * description: Check if specified file exists.
	 * @param fileExistsIn File name
	 * @return true if specified file exists, false otherwise
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="FileExists", inTypeDesc="File name", outTypeDesc="true if specified file exists, false otherwise")
	public boolean FileExists(String fileExistsIn) throws DevFailed {
		xlogger.entry();
		boolean fileExistsOut;
		/*----- PROTECTED REGION ID(SettingsManager.fileExists) ENABLED START -----*/

		String fileName = Utils.settingsFile(absolutePath + '/' + fileExistsIn);
		fileExistsOut = new File(fileName).exists();
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.fileExists
		xlogger.exit();
		return fileExistsOut;
	}
	
	/**
	 * Execute command "DeleteFile".
	 * description: Delete specified file.
	 * @param deleteFileIn File name
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="DeleteFile", inTypeDesc="File name", outTypeDesc="")
	public void DeleteFile(String deleteFileIn) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(SettingsManager.deleteFile) ENABLED START -----*/
		if (deleteFileIn.contains(".."))
			Except.throw_exception("BadDirectory",
					"Specified directory contains \"..\". Not supported ! ");
		String fileName = Utils.settingsFile(absolutePath + '/' + deleteFileIn);
		File file = new File(fileName);

		if (! file.exists())
			Except.throw_exception("DeleteFailed", file.getName() + " does not exist");
		if (! file.delete())
			Except.throw_exception("DeleteFailed", "Cannot delete " + file.getName());

		/*----- PROTECTED REGION END -----*/	//	SettingsManager.deleteFile
		xlogger.exit();
	}
	
	/**
	 * Execute command "RenameFile".
	 * description: Rename source file to target name.
	 * @param renameFileIn Source file name
	 *                     Target file name
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="RenameFile", inTypeDesc="Source file name\nTarget file name",
	         outTypeDesc="")
	public void RenameFile(String[] renameFileIn) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(SettingsManager.renameFile) ENABLED START -----*/
		if (renameFileIn.length!=2)
			Except.throw_exception("RenameFailed", "RenameFile needs an input argument with two file names");
		if (renameFileIn[0].contains("..") || renameFileIn[1].contains(".."))
			Except.throw_exception("BadDirectory",
					"Specified directory contains \"..\". Not supported ! ");

		String srcFileName = Utils.settingsFile(absolutePath + '/' + renameFileIn[0]);
		String targetFileName = Utils.settingsFile(absolutePath + '/' + renameFileIn[1]);

		File srcFile = new File(srcFileName);
		File targetFile = new File(targetFileName);

		if (! srcFile.exists())
			Except.throw_exception("RenameFailed", srcFile.getName() + " does not exist");
		if (!srcFile.renameTo(targetFile))
			Except.throw_exception("RenameFailed", "Cannot rename  " +
					srcFile.getName() + "  to  " + targetFile.getName());

		/*----- PROTECTED REGION END -----*/	//	SettingsManager.renameFile
		xlogger.exit();
	}
	
	/**
	 * Execute command "GetFileList".
	 * description: Get the file and directory list in specified path.
	 * @param getFileListIn Path to be added to the project path
	 *                      e.g.: ````, ``.``, ``sav``, ``old``,.....
	 * @return FILE:  or DIR:  followed by file or directory name
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="GetFileList", inTypeDesc="Path to be added to the project path\ne.g.: ````, ``.``, ``sav``, ``old``,.....",
	         outTypeDesc="FILE:  or DIR:  followed by file or directory name")
	public String[] GetFileList(String getFileListIn) throws DevFailed {
		xlogger.entry();
		String[] getFileListOut;
		/*----- PROTECTED REGION ID(SettingsManager.getFileList) ENABLED START -----*/
		if (getFileListIn.contains(".."))
			Except.throw_exception("BadDirectory",
					"Specified directory contains \"..\". Not supported ! ");
		getFileListOut = new BrowseFiles(absolutePath+'/'+getFileListIn).toStringArray();
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.getFileList
		xlogger.exit();
		return getFileListOut;
	}
	
	/**
	 * Execute command "MakeDirectory".
	 * description: Created the specified directory
	 * @param makeDirectoryIn Directory name (relative to project path)
	 * @throws DevFailed if command execution failed.
	 */
	@Command(name="MakeDirectory", inTypeDesc="Directory name (relative to project path)",
	         outTypeDesc="")
	public void MakeDirectory(String makeDirectoryIn) throws DevFailed {
		xlogger.entry();
		/*----- PROTECTED REGION ID(SettingsManager.makeDirectory) ENABLED START -----*/

		if (makeDirectoryIn.contains(".."))
			Except.throw_exception("BadDirectory",
					"Specified directory contains \"..\". Not supported ! ");
		StringTokenizer stk = new StringTokenizer(makeDirectoryIn, "/");
		String path = absolutePath;
		while (stk.hasMoreTokens()) {
			String dirName = stk.nextToken();
			path += "/" + dirName;
			File dir = new File(path);
			if (dir.exists() && !dir.isDirectory())
				Except.throw_exception("BadDirectory", path + " already exists as a file");
			if (!dir.exists()) {
				if (!dir.mkdir()) {
					Except.throw_exception("BadDirectory", "Cannot create: " + path);
				}
			}
		}
		
		/*----- PROTECTED REGION END -----*/	//	SettingsManager.makeDirectory
		xlogger.exit();
	}
	

	//========================================================
	//	Programmer's methods
	//========================================================
	/*----- PROTECTED REGION ID(SettingsManager.methods) ENABLED START -----*/
	
	private void checkProperties() throws DevFailed {
		//	Class property does not work in java server API
		//	Do it with client API
		rootPath = Utils.getSettingsRootPath();
		if (settingsFilesPath==null || settingsFilesPath.isEmpty())
			Except.throw_exception("PropertyNotSet", "Device property SettingsPath is not set");
		if (settingsFilesPath.contains(".."))
			Except.throw_exception("BadProperty",
					"Device property SettingsPath contains \"..\". Not supported ! ");

		//	build absolute path
		if (settingsFilesPath.startsWith(rootPath))
			absolutePath = settingsFilesPath;
		else
			absolutePath = rootPath + '/' + settingsFilesPath;
		//	Check if exists
		File file = new File(absolutePath);
		if (!file.exists())
			Except.throw_exception("BadProperty", "Path \"" + absolutePath + "\" does not exist");
		settingsPath = absolutePath = file.getAbsolutePath();

		System.out.println("Absolute path: " + absolutePath);
	}
	/*----- PROTECTED REGION END -----*/	//	SettingsManager.methods


	
	
	
	
	/**
	 * Starts the server.
	 * @param args program arguments (instance_name [-v[trace level]]  [-nodb [-dlist <device name list>] [-file=fileName]])
	 */
	public static void main(final String[] args) {
		/*----- PROTECTED REGION ID(SettingsManager.main) ENABLED START -----*/// /**

		/*----- PROTECTED REGION END -----*/	//	SettingsManager.main
		ServerManager.getInstance().start(args, SettingsManager.class);
		System.out.println("------- Started -------------");
	}
}
